Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії






Звіт
З лабораторної роботи №4
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА IoT КЛІЄНТА»








Виконав
ст. гр. ПЗПІ-22-8
Гуров Іван	Перевірив ст. викладач каф. ПІ
Сокорчук І. П.


	



Харків 2024
1 МЕТА РОБОТИ

Розробити клієнт IoT, який здійснює збір, аналіз і передачу даних на сервер відповідно до принципів Інтернету речей. Реалізувати бізнес-логіку, функціонал налаштування пристрою та забезпечити інтеграцію з іншими компонентами системи.

2 ХІД РОБОТИ

В ході виконання лабораторної роботи було впроваджено ряд інженерних рішень, які забезпечують функціональність та ефективність роботи програмного забезпечення:
•	Розроблено програмний код для IoT-пристрою, що взаємодіє із сенсорами тиску шин, напруги батареї та зносу гальмівних колодок. Пристрій обробляє дані та надсилає їх на сервер через протокол MQTT.
•	Вибрано сучасну платформу Wokwi для емуляції роботи пристрою, що дозволило швидко протестувати основні функції без фізичного апаратного забезпечення.
•	Створено механізм обробки даних сенсорів, включаючи аналіз аномалій та формування попереджень для користувача.
•	Реалізовано функцію автоматичного налаштування пристрою для з'єднання з сервером через Wi-Fi модуль ESP8266.
•	Проведено інтеграцію IoT-пристрою з сервером, створеним на основі Node.js та MongoDB, для збереження та аналізу отриманих даних.

2.1 Текстовий опис інженерних рішень

Програмний код IoT-пристрою побудований на базі Arduino IDE, використовуючи бібліотеки для роботи з Wi-Fi (ESP8266WiFi) та MQTT (PubSubClient). Основні компоненти:
•	Підключення до Wi-Fi: Автоматичне встановлення з'єднання з заданою мережею.
•	Зчитування даних сенсорів: Аналіз даних з трьох сенсорів (тиск, напруга батареї, знос гальм).
•	Обробка та надсилання даних: Перевірка допустимих меж значень, відправка на сервер через MQTT.
•	Логування: Вивід інформації для діагностики у серійну консоль.

 
Рисунок 2.1.1 – Схема IoT пристрою

2.2 Фрагменти програмного коду

2.2.1 Бізнес-логіка IoT-клієнта

Фрагмент коду зчитування даних сенсорів:
  1 // sensors.ino
  2 int readPressureSensor() {
  3     int pressure = analogRead(A0);
  4     Serial.print("Pressure: ");
  5     Serial.println(pressure);
  6     return pressure;
  7 }
  8
  9 int readBatteryVoltage() {
 10     int voltage = analogRead(A1);
 11     Serial.print("Battery Voltage: ");
 12     Serial.println(voltage);
 13     return voltage;
 14 }
 15
 16 int readBrakePadWear() {
 17     int wear = analogRead(A2);
 18     Serial.print("Brake Pad Wear: ");
 19     Serial.println(wear);
 20     return wear;
 21 }

2.2.2 Налаштування IoT-клієнта

Фрагмент коду підключення до Wi-Fi:
  1 // wifi_setup.ino
  2 void setupWiFi() {
  3     WiFi.begin("SSID", "password");
  4     Serial.print("Connecting to WiFi");
  5     while (WiFi.status() != WL_CONNECTED) {
  6         delay(500);
  7         Serial.print(".");
  8     }
  9     Serial.println("Connected to WiFi");
 10 }

2.3 UML Діаграми

2.3.1 Діаграма прецедентів IoT клієнта

 
Рисунок 2.3.1 – UML діаграма прецедентів IoT клієнта

•	Користувач: отримує дані про стан автомобіля.
•	IoT-пристрій: зчитує дані сенсорів, обробляє їх, надсилає на сервер.
•	Сервер: приймає дані, аналізує їх, зберігає в базі даних.

2.3.2 Діаграма діяльності IoT клієнта

 
Рисунок 2.3.2– UML діаграма діяльності IoT клієнта

•	Початок: Включення пристрою.
•	Підключення до Wi-Fi.
•	Зчитування даних сенсорів.
•	Обробка даних.
•	Надсилання даних на сервер.
•	Завершення: Відключення або очікування наступного циклу зчитування.

3	ВИСНОВКИ

У ході виконання лабораторної роботи було успішно розроблено IoT-клієнт, який відповідає сучасним вимогам до розумних пристроїв та IoT-систем. Реалізовано бізнес-логіку та функції налаштування клієнта, які забезпечують ефективний збір, аналіз і передачу даних. Впроваджений клієнт дозволяє інтегрувати пристрій у більш масштабну систему для моніторингу стану автомобіля, що підтверджує його практичну цінність.

Посилання на відео: https://youtu.be/W29102PPitU

