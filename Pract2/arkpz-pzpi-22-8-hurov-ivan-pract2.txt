Міністерство освіти і науки України
Харківський національний університет радіоелектроніки





Звіт 
до практичного заняття №2 з дисципліни 
«Аналіз та рефакторинг коду» 
На тему: «Методи рефакторингу коду програмного забезпечення»







Виконав:	Перевірив:
Ст. гр. ПЗПІ-22-8 	ст. викладач кафедри ПІ
Гуров І. Г.	Сокорчук Ігор Петрович







Харків 2024
1. Мета роботи
Навчити студентів основним методам рефакторингу коду на основі реальних прикладів з їхніх власних програмних проєктів. Студенти повинні навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

2. Завдання
1)	Студент повинен обрати три методи рефакторингу коду із книги Мартіна Фаулера «Refactoring. Improving the Design of Existing Code».
2)	Навести приклади свого особистого коду (з курсових, лабораторних або інших проєктів), який потребує покращення, та продемонструвати застосування обраних методів.
3)	Кожен метод рефакторингу повинен супроводжуватись:
•	Описом проблеми, яку вирішує даний метод.
•	Кодом до і після застосування методу рефакторингу.
•	Поясненням переваг використаного методу.

3. Хід роботи 
Було обрано три методи рефакторингу коду із книги Мартіна Фаулера «Refactoring. Improving the Design of Existing Code». У презентації (Додаток Б) наведено приклади свого особистого коду, який потребує покращення, та застосування обраних методів.
 
Висновки
Рефакторинг коду – це не просто косметична зміна, а потужний інструмент для створення більш якісних програмних продуктів. Використання методів рефакторингу є невід'ємною частиною професійної розробки програмного забезпечення. Кожен з цих методів сприяє створенню чистого, організованого та масштабованого коду, що є важливою умовою для успішного розвитку проектів.
 
ДОДАТОК А
Програмний код, використаний як приклад у презентації.

//Метод 1: Extract Class (Виділити Клас)
//Код до рефакторингу
public class Order {
    private List<Item> items;
    private double totalPrice;

    public void calculateTotalPrice() {
        // обчислення загальної суми
    }

    public void printOrder() {
        // виводи замовлення
    }

    public void saveOrder() {
        // збереження замовлення
    }
}

//Код після рефакторингу
public class Order {
    private List<Item> items;
    private Pricing pricing;
    private OrderSaver saver;

    public Order() {
        this.pricing = new Pricing(this);
        this.saver = new OrderSaver(this);
    }
}

public class Pricing {
    private Order order;

    public Pricing(Order order) {
        this.order = order;
    }

    public void calculateTotalPrice() {
        // обчислення загальної суми
    }
}

public class OrderSaver {
    private Order order;

    public OrderSaver(Order order) {
        this.order = order;
    }

    public void saveOrder() {
        // збереження замовлення
    }
}

//Метод 2: Introduce Null Object (Ввести Null-Об'єкт)
//Код до рефакторингу
public class Customer {
    private Address address;

    public void sendInvoice() {
        if (address != null) {
            address.send();
        } else {
            System.out.println("Адреса не вказана.");
        }
    }
}

//Код після рефакторингу
public class Customer {
    private Address address;

    public Customer() {
        this.address = new NullAddress(); // Встановлення Null-об’єкта за замовчуванням
    }

    public void sendInvoice() {
        address.send();
    }
}

public abstract class Address {
    public abstract void send();
}

public class RealAddress extends Address {
    @Override
    public void send() {
        // Логіка відправлення за реальною адресою
    }
}

public class NullAddress extends Address {
    @Override
    public void send() {
        // Нічого не робить, "нульова" операція
    }
}

//Метод 3: Extract Interface (Виділити Інтерфейс)
//Код до рефакторингу
public class PaymentService {
    public void processPayment(CreditCard card) {
    }
}

public class CreditCard {
    public void pay() {
    }
}

//Код після рефакторингу
public interface PaymentMethod {
    void processPayment();
}

public class CreditCard implements PaymentMethod {
    @Override
    public void processPayment() {
    }
}

public class PaymentService {
    public void processPayment(PaymentMethod method) {
        method.processPayment();
    }
} 
ДОДАТОК Б
Презентація на тему «Методи рефакторингу коду програмного забезпечення».
Посилання на відео: https://youtu.be/w03-rio-DhQ

