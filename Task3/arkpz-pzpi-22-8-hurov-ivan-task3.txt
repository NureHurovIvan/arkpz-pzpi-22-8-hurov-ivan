Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
З лабораторної роботи №3
З дисципліни «Аналіз та рефакторинг коду»
на тему: «РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ »








Виконав
ст. гр. ПЗПІ-22-8
Гуров Іван	Перевірив ст. викладач каф. ПІ
Сокорчук І. П.


	



Харків 2024
1 МЕТА РОБОТИ

Метою роботи є розробка  бізнес-логіки та функцій адміністрування для серверної частини програмної системи.

2 ХІД РОБОТИ

В ході виконання лабораторної роботи було впроваджено ряд функцій, які охоплюють основні аспекти адміністрування, безпеки та аналізу даних. Опис інженерних рішень включає:
•	Система передбачає можливість ролей користувачів (User, Admin), що забезпечує розподіл доступу до функцій.
•	Реалізовано функціонал для керування автомобілями та обслуговуванням: додавання автомобілів, видалення, а також додавання записів обслуговування.
•	Для адміністраторів розроблено механізм перегляду списку користувачів, видалення облікових записів, а також редагування ролей користувачів.
•	Для захисту даних і ресурсів використано JWT токени, які забезпечують автентифікацію та авторизацію користувачів.
•	Створено окремі middleware для автентифікації (authenticate) та авторизації (authorize).
2.1 Текстовий опис інженерних рішень
Серверна частина побудована на основі Express.js, а для збереження даних використовується база даних MongoDB. Основні компоненти включають:
•	Маршрути (Routes): Використовуються для обробки запитів клієнта. Наприклад, “/register” для реєстрації користувачів та “/vehicles” для керування автомобілями.
•	Контролери (Controllers): Логіка обробки даних розділена на окремі контролери для користувачів, автомобілів та записів обслуговування.
•	Моделі (Models): Для кожної сутності (“User”, “Vehicle”, “Maintenance”) створено модель, яка відображає структуру даних у базі MongoDB.

2.2 Фрагменти програмного коду

2.2.1 Бізнес-логіка серверної частини

Фрагмент коду для додавання автомобіля:
  1 // vehicleController.js
  2 exports.addVehicle = async (req, res) => {
  3     try {
  4         const { make, model, year, vin_number } = req.body;
  5         const newVehicle = new Vehicle({
  6             user_id: req.user.id,
  7             make,
  8             model,
  9             year,
 10             vin_number
 11         });
 12         await newVehicle.save();
 13         res.status(201).json({ message: 'Vehicle added successfully', vehicle: newVehicle });
 14     } catch (error) {
 15         res.status(500).json({ message: 'Server error', error });
 16     }
 17 };

2.2.2 Адміністрування серверної частини

Фрагмент коду для перегляду всіх користувачів (адміністратор):
  1 // userController.js
  2 exports.getAllUsers = async (req, res) => {
  3     try {
  4         const users = await User.find();
  5         res.status(200).json(users);
  6     } catch (error) {
  7         res.status(500).json({ message: 'Server error', error });
  8     }
  9 };
Фрагмент коду для зміни ролі користувача:
  1 // userController.js
  2 exports.updateUserRole = async (req, res) => {
  3     try {
  4         const { role } = req.body;
  5         const user = await User.findById(req.params.user_id);
  6         if (!user) return res.status(404).json({ message: 'User not found' });
  7         user.role = role;
  8         await user.save();
  9         res.status(200).json({ message: 'Role updated successfully', user });
 10     } catch (error) {
 11         res.status(500).json({ message: 'Server error', error });
 12     }
 13 };

3	ВИСНОВКИ

Під час виконання лабораторної роботи було розроблено серверну частину програмної системи, що забезпечує бізнес-логіку та функції адміністрування, необхідні для ефективного керування ресурсами та даними користувачів. Проведено всебічну перевірку роботи серверних функцій, включаючи керування користувачами, автомобілями та записами обслуговування, а також відстеження відповідності функцій вимогам системи. Особливу увагу приділено забезпеченню безпеки, стабільності та масштабованості рішення. У результаті виконаної роботи створено функціональну серверну частину, яка підтримує автентифікацію, авторизацію користувачів за допомогою JWT токенів, взаємодію з базою даних MongoDB, а також включає механізми захисту даних і адаптивності для інтеграції нових функцій. Це дозволяє системі ефективно вирішувати завдання адміністрування, спрощувати управління ресурсами та забезпечувати високу продуктивність.

Посилання на відео: https://youtu.be/T1JYcse7Ego
ДОДАТОК А
UML діаграма діяльності

 
Рисунок А.1 – UML діаграма діяльності 
ДОДАТОК Б
UML діаграма взаємодії

 
Рисунок Б.1 – UML діаграма взаємодії між клієнтом і сервером

